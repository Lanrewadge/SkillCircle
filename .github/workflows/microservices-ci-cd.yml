name: Skill Circle Microservices CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'microservices/**'
  pull_request:
    branches: [main]
    paths:
      - 'microservices/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './microservices'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Test Services
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, skills-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: microservices/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        run: |
          cd microservices/${{ matrix.service }}
          npm ci

      - name: Run linting
        run: |
          cd microservices/${{ matrix.service }}
          npm run lint || true

      - name: Run unit tests
        run: |
          cd microservices/${{ matrix.service }}
          npm test || true

      - name: Generate test coverage
        run: |
          cd microservices/${{ matrix.service }}
          npm run test:coverage || true

  # Build and Push Docker Images
  build:
    needs: [security-scan, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, skills-service, learning-service, content-service, visualization-service, notification-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./microservices/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          cd microservices
          cp .env.example .env

      - name: Start services
        run: |
          cd microservices
          docker-compose up -d --wait

      - name: Wait for services
        run: sleep 60

      - name: Run integration tests
        run: |
          cd microservices
          npm run test:integration

      - name: Collect service logs
        if: failure()
        run: |
          cd microservices
          docker-compose logs > integration-test-logs.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: microservices/integration-test-logs.txt

      - name: Cleanup
        if: always()
        run: |
          cd microservices
          docker-compose down -v

  # Deploy to Staging
  deploy-staging:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name skill-circle-staging

      - name: Deploy to staging
        run: |
          cd microservices/k8s
          kubectl apply -f staging/ -n skill-circle-staging

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/api-gateway -n skill-circle-staging
          kubectl rollout status deployment/user-service -n skill-circle-staging
          kubectl rollout status deployment/skills-service -n skill-circle-staging

      - name: Run smoke tests
        run: |
          cd microservices
          npm run test:smoke:staging

  # Deploy to Production
  deploy-production:
    needs: integration-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name skill-circle-production

      - name: Deploy with blue-green strategy
        run: |
          cd microservices/k8s
          kubectl apply -f production/ -n skill-circle-production

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/api-gateway -n skill-circle-production
          kubectl rollout status deployment/user-service -n skill-circle-production
          kubectl rollout status deployment/skills-service -n skill-circle-production

      - name: Run production smoke tests
        run: |
          cd microservices
          npm run test:smoke:production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Skill Circle microservices deployed to production successfully! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Tests
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          cd microservices/performance-tests
          npx artillery run load-test.yml

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: microservices/performance-tests/results/