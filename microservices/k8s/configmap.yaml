apiVersion: v1
kind: ConfigMap
metadata:
  name: skill-circle-config
  namespace: skill-circle
data:
  # Environment
  NODE_ENV: "production"

  # Database URLs
  POSTGRES_HOST: "postgresql.skill-circle.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "skill_circle"

  MONGODB_HOST: "mongodb.skill-circle.svc.cluster.local"
  MONGODB_PORT: "27017"

  REDIS_HOST: "redis.skill-circle.svc.cluster.local"
  REDIS_PORT: "6379"

  # Message Queue
  RABBITMQ_HOST: "rabbitmq.skill-circle.svc.cluster.local"
  RABBITMQ_PORT: "5672"

  KAFKA_BROKERS: "kafka.skill-circle.svc.cluster.local:9092"

  # Service Discovery
  CONSUL_HOST: "consul.skill-circle-system.svc.cluster.local"
  CONSUL_PORT: "8500"

  # Monitoring
  PROMETHEUS_URL: "http://prometheus.skill-circle-monitoring.svc.cluster.local:9090"
  GRAFANA_URL: "http://grafana.skill-circle-monitoring.svc.cluster.local:3000"

  # API Gateway
  API_GATEWAY_URL: "http://api-gateway.skill-circle.svc.cluster.local:3000"

  # AWS Configuration
  AWS_REGION: "us-east-1"

  # Email Configuration
  EMAIL_SERVICE: "ses"
  FROM_EMAIL: "notifications@skillcircle.com"

  # Push Notifications
  VAPID_SUBJECT: "mailto:notifications@skillcircle.com"

  # Rate Limiting
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"

  # Cache Configuration
  CACHE_TTL: "3600"
  CACHE_MAX_SIZE: "100"

  # Logging
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: skill-circle
data:
  nginx.conf: |
    upstream api_gateway {
        server api-gateway:3000;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;
        server_name skillcircle.com www.skillcircle.com;

        # Redirect to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name skillcircle.com www.skillcircle.com;

        ssl_certificate /etc/ssl/certs/tls.crt;
        ssl_certificate_key /etc/ssl/private/tls.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

        # API routes
        location /api/ {
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket support
        location /socket.io/ {
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static files and frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }